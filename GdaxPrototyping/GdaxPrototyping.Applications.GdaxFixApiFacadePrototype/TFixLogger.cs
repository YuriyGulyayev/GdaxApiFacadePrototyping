namespace GdaxPrototyping.Applications.GdaxFixApiFacadePrototype
{
   /// <summary>
   /// todo {QuickFix.ILog} is derived from {System.IDisposable}.
   /// todo Verify that this doesn't break the derived class.
   /// </summary>
   [System.Security.SuppressUnmanagedCodeSecurityAttribute()]
   public abstract class TFixLogger:
      QuickFix.ILogFactory,
      QuickFix.ILog
   {
      #region Data.

      public readonly string Name;

      #endregion

      #region // {protected} Instance default constructor.

      // Cannot be autogenerated.

      #endregion
      #region {protected} Instance constructor.

      protected TFixLogger
         ( string name1
         ):
         base()
      {
         Name = name1;
      }

      #endregion

      #region {QuickFix.ILogFactory.Create}.

      QuickFix.ILog QuickFix.ILogFactory.Create
         ( QuickFix.SessionID fixSessionId
         )
      {
         return this;
      }

      #endregion

      #region {QuickFix.ILog.Clear}.

      void QuickFix.ILog.Clear()
      {
      }

      #endregion
      #region {QuickFix.ILog.OnEvent}.

      void QuickFix.ILog.OnEvent
         ( string text
         )
      {
         try
         {
            // <Comment201704245>
            // todo.1 Is this comment relevant?
            // We probably don't need to call {Common.Core.Threading.TThreadingHelpers.TryEnterCriticalSection}.
            // </Comment201704245>
            System.Threading.Monitor.Enter(Common.Core.Threading.TThreadingHelpers.MainLockable);

            // todo.1 Is this comment relevant?
            // yg? The admin doesn't need to see all events. Bit for now let's keep it simple.
            Common.Core.Diagnostics.TLoggingHelpers.LogLogRecord
               ( @"Warning; QuickFix event; ",
                  Name,
                  @"; ",
                  text
               );

            System.Threading.Monitor.Exit(Common.Core.Threading.TThreadingHelpers.MainLockable);
         }
         catch(System.Exception exception)
         {
            System.Environment.FailFast(null, exception);
         }
      }

      #endregion
      #region {QuickFix.ILog.OnOutgoing}.

      void QuickFix.ILog.OnOutgoing
         ( string text
         )
      {
         try
         {
            // Comment201704245 applies.
            System.Threading.Monitor.Enter(Common.Core.Threading.TThreadingHelpers.MainLockable);

            Common.Core.Diagnostics.TLoggingHelpers.LogLogRecord
               ( @"Info; QuickFix outgoing; ",
                  Name,
                  @"; ",
                  text
               );
            System.Threading.Monitor.Exit(Common.Core.Threading.TThreadingHelpers.MainLockable);
         }
         catch(System.Exception exception)
         {
            System.Environment.FailFast(null, exception);
         }
      }

      #endregion
      #region {QuickFix.ILog.OnIncoming}.

      void QuickFix.ILog.OnIncoming
         ( string text
         )
      {
         try
         {
            // Comment201704245 applies.
            System.Threading.Monitor.Enter(Common.Core.Threading.TThreadingHelpers.MainLockable);

            Common.Core.Diagnostics.TLoggingHelpers.LogLogRecord
               ( @"Info; QuickFix incoming; ",
                  Name,
                  @"; ",
                  text
               );
            System.Threading.Monitor.Exit(Common.Core.Threading.TThreadingHelpers.MainLockable);
         }
         catch(System.Exception exception)
         {
            System.Environment.FailFast(null, exception);
         }
      }

      #endregion
      #region {System.IDisposable.Dispose}.

      /// <summary>
      /// This is really a member of {QuickFix.ILog}.
      /// todo.1 Cross-ref this with the derived class.
      /// </summary>
      //void QuickFix.ILog.Dispose()
      void System.IDisposable.Dispose()
      //public /*virtual*/ void Dispose()
      {
      }

      #endregion
   }
}
